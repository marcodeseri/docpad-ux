{"ts":1377540212087,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Generated by CoffeeScript 1.6.3\nvar __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nmodule.exports = function(BasePlugin) {\n  var PagedPlugin, TaskGroup, _ref;\n  TaskGroup = require('taskgroup').TaskGroup;\n  return PagedPlugin = (function(_super) {\n    __extends(PagedPlugin, _super);\n\n    function PagedPlugin() {\n      _ref = PagedPlugin.__super__.constructor.apply(this, arguments);\n      return _ref;\n    }\n\n    PagedPlugin.prototype.name = 'paged';\n\n    PagedPlugin.prototype.extendCollections = function(opts) {\n      var docpad, me;\n      me = this;\n      docpad = this.docpad;\n      docpad.getFiles({\n        isPaged: true,\n        isPagedAuto: {\n          $ne: true\n        }\n      }).on('remove', function(model) {\n        return me.removePagesFor(model);\n      });\n      return this;\n    };\n\n    PagedPlugin.prototype.extendTemplateData = function(opts) {\n      var docpad, templateData;\n      docpad = this.docpad;\n      templateData = opts.templateData;\n      templateData.getPageUrl = function(pageNumber, document) {\n        var err, page, pageDocument, pageId, pageUrl, relativePath, _ref1;\n        if (document == null) {\n          document = this.getDocument();\n        }\n        page = document.get('page');\n        if (pageNumber == null) {\n          pageNumber = (_ref1 = page != null ? page.number : void 0) != null ? _ref1 : 0;\n        }\n        pageId = page.pages[pageNumber];\n        pageDocument = docpad.getFileById(pageId);\n        if (pageDocument == null) {\n          relativePath = document.get('relativePath');\n          err = \"Could not find document with id \" + pageId + \" that is page \" + pageNumber + \" of \" + relativePath;\n          docpad.error(err);\n          pageUrl = err;\n        } else {\n          pageUrl = pageDocument.get('url');\n        }\n        return pageUrl;\n      };\n      templateData.hasNextPage = function(document) {\n        var has, page;\n        if (document == null) {\n          document = this.getDocument();\n        }\n        page = document.get('page');\n        has = page.number < page.count - 1;\n        return has;\n      };\n      templateData.getNextPage = function(document) {\n        var page, result;\n        if (document == null) {\n          document = this.getDocument();\n        }\n        page = document.get('page');\n        result = '#';\n        if (page.number < page.count - 1) {\n          result = this.getPageUrl(page.number + 1, document);\n        }\n        return result;\n      };\n      templateData.hasPrevPage = function(document) {\n        var has, page;\n        if (document == null) {\n          document = this.getDocument();\n        }\n        page = document.get('page');\n        has = page.number > 0;\n        return has;\n      };\n      templateData.getPrevPage = function(document) {\n        var page, result;\n        if (document == null) {\n          document = this.getDocument();\n        }\n        page = document.get('page');\n        result = '#';\n        if (page.number > 0) {\n          result = this.getPageUrl(page.number - 1, document);\n        }\n        return result;\n      };\n      return true;\n    };\n\n    PagedPlugin.prototype.removePagesFor = function(document, collection, next) {\n      var database, docpad, filePath, pages, tasks, _ref1;\n      docpad = this.docpad;\n      database = docpad.getDatabase();\n      filePath = document.getFilePath();\n      pages = ((_ref1 = document.get('page')) != null ? _ref1.pages : void 0) || [];\n      if (pages.length === 0) {\n        if (typeof next === \"function\") {\n          next();\n        }\n        return this;\n      }\n      docpad.log('debug', \"Remove pages for:\", filePath);\n      tasks = new TaskGroup().once('complete', function(err) {\n        if (err) {\n          return typeof next === \"function\" ? next(err) : void 0;\n        }\n        docpad.log('debug', \"Removed pages for:\", filePath);\n        return typeof next === \"function\" ? next() : void 0;\n      });\n      pages.forEach(function(pageId) {\n        var pageDocument;\n        if (pageId === document.id) {\n          return;\n        }\n        pageDocument = database.get(pageId);\n        if (!pageDocument) {\n          return;\n        }\n        if (collection != null) {\n          collection.remove(pageDocument);\n        }\n        database.remove(pageDocument);\n        return tasks.addTask(function(complete) {\n          return pageDocument[\"delete\"](complete);\n        });\n      });\n      tasks.run();\n      return this;\n    };\n\n    PagedPlugin.prototype.renderBeforePriority = 550;\n\n    PagedPlugin.prototype.renderBefore = function(opts, next) {\n      var collection, database, docpad, me, newPagesToRender, sourcePageDocuments, tasks, templateData;\n      me = this;\n      docpad = this.docpad;\n      collection = opts.collection, templateData = opts.templateData;\n      database = docpad.getDatabase();\n      newPagesToRender = [];\n      sourcePageDocuments = collection.findAll({\n        isPaged: true,\n        isPagedAuto: {\n          $ne: true\n        }\n      });\n      if (sourcePageDocuments.length === 0) {\n        next();\n        return this;\n      }\n      docpad.log('info', \"Adding pages for \" + sourcePageDocuments.length + \" documents...\");\n      tasks = new TaskGroup().once('complete', function(err) {\n        if (err) {\n          return next(err);\n        }\n        docpad.log('info', \"Added pages\");\n        return next();\n      });\n      sourcePageDocuments.forEach(function(document) {\n        return tasks.addTask(function(complete) {\n          return me.removePagesFor(document, collection, complete);\n        });\n      });\n      sourcePageDocuments.forEach(function(document) {\n        return tasks.addGroup(function(addGroup, addTask) {\n          var basename, extension, filePath, filename, lastDoc, meta, numberOfPages, outBasename, outExtension, outFilename, pageSize, pagedCollection, pagedCollectionName, pages, relativePath, url, _i, _results;\n          meta = document.getMeta();\n          numberOfPages = meta.get('pageCount') || 1;\n          pageSize = meta.get('pageSize') || 1;\n          lastDoc = pageSize * numberOfPages;\n          if (meta.get('pagedCollection')) {\n            pagedCollectionName = meta.get('pagedCollection');\n            pagedCollection = docpad.getCollection(pagedCollectionName);\n            numberOfPages = Math.ceil(pagedCollection.length / pageSize);\n            lastDoc = pagedCollection.length;\n          }\n          filePath = document.getFilePath();\n          relativePath = document.get('relativePath');\n          filename = document.get('filename');\n          basename = document.get('basename');\n          extension = document.get('extensions').join('.');\n          outFilename = document.get('outFilename');\n          outBasename = document.get('outBasename');\n          outExtension = document.get('outExtension');\n          url = document.get('url');\n          pages = [document.id];\n          document.set({\n            isPaged: true,\n            isPagedAuto: false,\n            isPagedFor: false,\n            page: {\n              count: numberOfPages,\n              size: pageSize,\n              number: 0,\n              startIdx: 0,\n              endIdx: Math.min(pageSize, lastDoc),\n              pages: pages\n            }\n          });\n          if (numberOfPages > 1) {\n            return (function() {\n              _results = [];\n              for (var _i = 1; 1 <= numberOfPages ? _i < numberOfPages : _i > numberOfPages; 1 <= numberOfPages ? _i++ : _i--){ _results.push(_i); }\n              return _results;\n            }).apply(this).forEach(function(pageNumber) {\n              return addTask(function(complete) {\n                var pageDocument, pageFilename, pageOutFilename, pageRelativePath;\n                pageFilename = \"\" + basename + \"-\" + pageNumber + \".\" + extension;\n                pageOutFilename = \"\" + outBasename + \".\" + pageNumber + \".\" + outExtension;\n                pageRelativePath = relativePath.replace(filename, pageFilename);\n                docpad.log('info', \"Creating page \" + pageNumber + \" for \" + filePath + \" at \" + pageRelativePath);\n                pageDocument = docpad.cloneModel(document);\n                pageDocument.attributes.urls = [];\n                pageDocument.set({\n                  isPagedAuto: true,\n                  isPagedFor: document.id,\n                  page: {\n                    count: numberOfPages,\n                    size: pageSize,\n                    number: pageNumber,\n                    startIdx: pageNumber * pageSize,\n                    endIdx: Math.min(pageNumber * pageSize + pageSize, lastDoc),\n                    pages: pages\n                  }\n                });\n                pageDocument.setMeta({\n                  fullPath: null,\n                  relativePath: pageRelativePath,\n                  filename: pageFilename,\n                  outFilename: pageOutFilename\n                });\n                return pageDocument.normalize(function(err) {\n                  var pageFilePath;\n                  if (err) {\n                    return complete(err);\n                  }\n                  pageFilePath = pageDocument.getFilePath();\n                  docpad.log('debug', \"Adding page \" + pageNumber + \" for \" + filePath + \" at \" + pageFilePath);\n                  pages.push(pageDocument.id);\n                  collection.add(pageDocument);\n                  database.add(pageDocument);\n                  docpad.log('debug', \"Created and added page \" + pageNumber + \" for \" + filePath + \" at \" + pageFilePath);\n                  return complete();\n                });\n              });\n            });\n          }\n        });\n      });\n      tasks.run();\n      return true;\n    };\n\n    return PagedPlugin;\n\n  })(BasePlugin);\n};\n"]],"start1":0,"start2":0,"length1":0,"length2":10003}]],"length":10003}
