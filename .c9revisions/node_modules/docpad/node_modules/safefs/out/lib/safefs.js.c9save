{"ts":1377932985465,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// Generated by CoffeeScript 1.6.3\nvar TaskGroup, fsUtil, pathUtil, safefs, _base, _ref;\n\nfsUtil = require('fs');\n\npathUtil = require('path');\n\nTaskGroup = require('taskgroup').TaskGroup;\n\nif (global.safefsGlobal == null) {\n  global.safefsGlobal = {};\n}\n\nif ((_base = global.safefsGlobal).pool == null) {\n  _base.pool = new TaskGroup().setConfig({\n    concurrency: (_ref = process.env.NODE_MAX_OPEN_FILES) != null ? _ref : 100,\n    pauseOnError: false\n  }).run();\n}\n\nsafefs = {\n  openFile: function(fn) {\n    global.safefsGlobal.pool.addTask(fn);\n    return safefs;\n  },\n  closeFile: function() {\n    console.log('safefs.closeFile has been deprecated, please use the safefs.openFile completion callback to close files');\n    return safefs;\n  },\n  getParentPathSync: function(p) {\n    var parentPath;\n    parentPath = p.replace(/[\\/\\\\]$/, '').replace(/[\\/\\\\][^\\/\\\\]+$/, '');\n    return parentPath;\n  },\n  ensurePath: function(path, options, next) {\n    if (next == null) {\n      next = options;\n      options = null;\n    }\n    if (options == null) {\n      options = {};\n    }\n    if (options.mode == null) {\n      options.mode = null;\n    }\n    safefs.exists(path, function(exists) {\n      var parentPath;\n      if (exists) {\n        return next(null, true);\n      }\n      parentPath = safefs.getParentPathSync(path);\n      return safefs.ensurePath(parentPath, options, function(err) {\n        if (err) {\n          return next(err, false);\n        }\n        return safefs.mkdir(path, options.mode, function(err) {\n          return safefs.exists(path, function(exists) {\n            if (!exists) {\n              err = new Error(\"Failed to create the directory: \" + path);\n              return next(err, false);\n            }\n            return next(null, false);\n          });\n        });\n      });\n    });\n    return safefs;\n  },\n  readFile: function(path, options, next) {\n    if (next == null) {\n      next = options;\n      options = null;\n    }\n    safefs.openFile(function(closeFile) {\n      return fsUtil.readFile(path, options, function(err, data) {\n        closeFile();\n        return next(err, data);\n      });\n    });\n    return safefs;\n  },\n  writeFile: function(path, data, options, next) {\n    if (next == null) {\n      next = options;\n      options = null;\n    }\n    safefs.ensurePath(pathUtil.dirname(path), options, function(err) {\n      if (err) {\n        return next(err);\n      }\n      return safefs.openFile(function(closeFile) {\n        return fsUtil.writeFile(path, data, options, function(err) {\n          closeFile();\n          return next(err);\n        });\n      });\n    });\n    return safefs;\n  },\n  appendFile: function(path, data, options, next) {\n    if (next == null) {\n      next = options;\n      options = null;\n    }\n    safefs.ensurePath(pathUtil.dirname(path), options, function(err) {\n      if (err) {\n        return next(err);\n      }\n      return safefs.openFile(function(closeFile) {\n        return fsUtil.appendFile(path, data, options, function(err) {\n          closeFile();\n          return next(err);\n        });\n      });\n    });\n    return safefs;\n  },\n  mkdir: function(path, mode, next) {\n    if (next == null) {\n      next = mode;\n      mode = null;\n    }\n    if (mode == null) {\n      mode = 0x1ff & (~process.umask());\n    }\n    safefs.openFile(function(closeFile) {\n      return fsUtil.mkdir(path, mode, function(err) {\n        closeFile();\n        return next(err);\n      });\n    });\n    return safefs;\n  },\n  lstat: function(path, next) {\n    safefs.openFile(function(closeFile) {\n      return fsUtil.lstat(path, function(err, stat) {\n        closeFile();\n        return next(err, stat);\n      });\n    });\n    return safefs;\n  },\n  stat: function(path, next) {\n    safefs.openFile(function(closeFile) {\n      return fsUtil.stat(path, function(err, stat) {\n        closeFile();\n        return next(err, stat);\n      });\n    });\n    return safefs;\n  },\n  readdir: function(path, next) {\n    safefs.openFile(function(closeFile) {\n      return fsUtil.readdir(path, function(err, files) {\n        closeFile();\n        return next(err, files);\n      });\n    });\n    return safefs;\n  },\n  unlink: function(path, next) {\n    safefs.openFile(function(closeFile) {\n      return fsUtil.unlink(path, function(err) {\n        closeFile();\n        return next(err);\n      });\n    });\n    return safefs;\n  },\n  rmdir: function(path, next) {\n    safefs.openFile(function(closeFile) {\n      return fsUtil.rmdir(path, function(err) {\n        closeFile();\n        return next(err);\n      });\n    });\n    return safefs;\n  },\n  exists: function(path, next) {\n    var exists;\n    exists = fsUtil.exists || pathUtil.exists;\n    safefs.openFile(function(closeFile) {\n      return exists(path, function(exists) {\n        closeFile();\n        return next(exists);\n      });\n    });\n    return safefs;\n  },\n  existsSync: function(path) {\n    var existsSync, result;\n    existsSync = fsUtil.existsSync || pathUtil.existsSync;\n    result = existsSync(path);\n    return result;\n  }\n};\n\nmodule.exports = safefs;\n"]],"start1":0,"start2":0,"length1":0,"length2":5031}]],"length":5031}
